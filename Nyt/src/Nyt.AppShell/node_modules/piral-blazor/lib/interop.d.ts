import type { BlazorLogLevel, BlazorRootConfig, WebAssemblyStartOptions } from './types';
export declare function processEvent(type: string, args: any): any;
export declare function setLogLevel(logLevel: BlazorLogLevel): any;
export declare function createElement(moduleName: string, props: any): Promise<string>;
export declare function updateElement(referenceId: string, props: any): Promise<string>;
export declare function destroyElement(referenceId: string): Promise<string>;
export declare function activate(moduleName: string, props: any): Promise<string>;
export declare function reactivate(moduleName: string, referenceId: string, props: any): Promise<void>;
export declare function deactivate(moduleName: string, referenceId: string): Promise<void>;
export declare function callNotifyLocationChanged(url: string, replace: boolean, state: any): Promise<void>;
export declare function setLanguage(language: string): Promise<void>;
export declare function getCapabilities(): Promise<Array<string>>;
export declare function loadResource(url: string): Promise<void>;
export declare function loadResourceWithSymbol(dllUrl: string, pdbUrl: string): Promise<void>;
export declare function unloadResource(url: string): Promise<void>;
export interface PiletData {
    dllUrl: string;
    pdbUrl?: string;
    name: string;
    version: string;
    config: string;
    baseUrl: string;
    satellites?: Record<string, Array<string>>;
    dependencies: Array<string>;
    kind?: string;
    sharedDependencies?: Array<string>;
    dependencySymbols?: Array<string>;
}
export declare function loadBlazorPilet(id: string, data: PiletData): any;
export declare function unloadBlazorPilet(id: string): any;
export declare function initialize(scriptUrl: string, publicPath: string, opts?: WebAssemblyStartOptions): Promise<BlazorRootConfig>;
export declare function createBootLoader(scriptUrl: string, extraScriptUrls: Array<string>): (opts?: WebAssemblyStartOptions) => Promise<{
    config: BlazorRootConfig;
    first: boolean;
}>;
