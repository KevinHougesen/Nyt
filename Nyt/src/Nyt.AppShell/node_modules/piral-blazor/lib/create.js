import { createConverter } from './converter';
import { createDependencyLoader } from './dependencies';
function createDefaultHandler(context) {
    return (inform) => {
        context.on('select-language', (ev) => {
            inform(ev.currentLanguage);
        });
    };
}
/**
 * Creates new Pilet API extensions for integration of Blazor.
 */
export function createBlazorApi(config = {}) {
    return (context) => {
        const { lazy = true, initialLanguage, onLanguageChange = createDefaultHandler(context), logLevel } = config;
        const convert = createConverter(lazy, config.options, {
            current: initialLanguage,
            onChange: onLanguageChange || (() => { }),
        }, logLevel);
        context.converters.blazor = ({ moduleName, args, dependency, options }) => convert(moduleName, dependency, args, options);
        return (_, meta) => {
            const loader = createDependencyLoader(convert);
            let options;
            return {
                defineBlazorReferences(references, satellites, prio, kind, sharedDependencies) {
                    return loader.defineBlazorReferences(references, meta, satellites, prio, kind, sharedDependencies);
                },
                defineBlazorOptions(blazorOptions) {
                    options = blazorOptions;
                },
                releaseBlazorReferences: loader.releaseBlazorReferences,
                fromBlazor(moduleName, args) {
                    return {
                        type: 'blazor',
                        dependency: loader.getDependency(),
                        moduleName,
                        args,
                        options,
                    };
                },
            };
        };
    };
}
//# sourceMappingURL=create.js.map