import type { BlazorOptions } from './lib/types';
export interface HtmlComponent<TProps> {
    component: {
        mount(element: HTMLElement, props: TProps, ctx: any, locals: any): void;
        update?(element: HTMLElement, props: TProps, ctx: any, locals: any): void;
        unmount?(element: HTMLElement, locals: any): void;
    };
    type: 'html';
}
export interface BlazorConverter {
    (moduleName: string, args?: Record<string, any>): HtmlComponent<any>;
}
export declare function defineBlazorOptions(options: BlazorOptions): void;
export declare const fromBlazor: BlazorConverter;
export declare const defineBlazorReferences: (references: string[], meta?: PiletMetadata, satellites?: {}, prio?: number, kind?: string, sharedDependencies?: any[]) => void;
export declare const releaseBlazorReferences: () => Promise<void>;
